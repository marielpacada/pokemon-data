pokemon <- read.csv(file.choose())
#is one type more likely to be a legendary than another?
types <- c(levels(pokemon$type1)) #types in alphabetical order
legend_types <- c() #creates empty vector
for (i in pokemon$pokedex){ #iterates through all pokemon
if (pokemon$is_legend[i] == 1){ #checks if legendary
legend_types <- c(legend_types, types[pokemon$type1[i]])
} #type1 returns integer
} #uses type1 as index for types in order to return character vector
counts <- as.data.frame(legend_types) #makes vector into dataframe
#plots tyoes that are legends against count
ggplot(counts, aes(x = legend_types, fill = legend_types)) + geom_bar()
x <- unique(legend_types)
setdiff(types, x)
#there are no fighting or poison legendaries
library("ggplot2", lib.loc="~/R/win-library/3.5")
#plots tyoes that are legends against count
ggplot(counts, aes(x = legend_types, fill = legend_types)) + geom_bar()
rm(i)
avg_weight <- c()
for (i in types){
t <- mean(subset(pokemon, type1 == i)$weight_kg)
avg_weight <- c(avg_weight, t)
}
rm(i)
rm(t)
avg_weight
View(pokemon)
View(pokemon)
View(pokemon)
pokemon <- read.csv(file.choose())
all_types <- c()
for (type in pokemon$type1){
all_types <- c(all_types, type)
}
all_types <- unique(all_types)
rm(type)
types <- levels(pokemon$type1)
rm(all_types)
#appends 18 unique types in a vector
all_types <- levels(pokemon$type1)
for (i in types){
t <- mean(subset(pokemon, type1 == i)$weight_kg)
avg_weight <- c(avg_weight, t)
}
rm(i)
rm(t)
avg_weight <- c()
for (i in types){
t <- mean(subset(pokemon, type1 == i)$weight_kg)
avg_weight <- c(avg_weight, t)
}
rm(i)
rm(t)
avg_weight
table(avg_weight)
rm(avg_weight)
rm(all_types)
type_weight <- c()
for (i in types){
t <- mean(subset(pokemon, type1 == i)$weight_kg)
type_weight <- c(type_weight, t)
}
rm(i)
rm(t)
avg_weight <- data.frame(
type = types,
weight = type_weight,
stringsAsFactors = FALSE
)
avg_weight
install.packages("r2d3")
types <- levels(pokemon$type1)
type_weight <- c()
for (i in types){
t <- sd(subset(pokemon, type1 == i)$weight_kg)
type_weight <- c(type_weight, t)
}
rm(type_weight)
types <- levels(pokemon$type1)
type_weight <- c()
for (i in types){
t <- sd(subset(pokemon, type1 == i)$weight_kg)
type_weight <- c(type_weight, t)
}
